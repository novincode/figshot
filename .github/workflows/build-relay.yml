name: Build FigShot from Private Repository

on:
  repository_dispatch:
    types: [build-figshot]
  workflow_dispatch:
    inputs:
      ref:
        description: 'Branch or tag to build from private repository'
        required: false
        default: 'main'
        type: string

env:
  CARGO_TERM_COLOR: always

jobs:
  build:
    strategy:
      fail-fast: false
      matrix:
        include:
          - platform: 'macos-latest'
            args: '--target aarch64-apple-darwin'
            name: 'macOS ARM64'
            target: 'aarch64-apple-darwin'
          - platform: 'macos-13'
            args: '--target x86_64-apple-darwin'
            name: 'macOS Intel'
            target: 'x86_64-apple-darwin'
          - platform: 'ubuntu-22.04'
            args: '--target x86_64-unknown-linux-gnu'
            name: 'Linux'
            target: 'x86_64-unknown-linux-gnu'
          - platform: 'windows-latest'
            args: '--target x86_64-pc-windows-msvc'
            name: 'Windows'
            target: 'x86_64-pc-windows-msvc'

    runs-on: ${{ matrix.platform }}
    name: Build for ${{ matrix.name }}

    steps:
      - name: Checkout private repository
        env:
          GITHUB_TOKEN: ${{ secrets.PRIVATE_REPO_PAT }}
        run: |
          git clone https://${{ secrets.PRIVATE_REPO_PAT }}@github.com/novincode/figma-flow-capture-gui.git source
          cd source
          git checkout ${{ github.event.client_payload.ref || github.event.inputs.ref || 'main' }}

      - name: Install system dependencies (Linux)
        if: matrix.platform == 'ubuntu-22.04'
        run: |
          sudo apt-get update
          # Remove conflicting packages first
          sudo apt-get remove -y libappindicator3-dev || true
          sudo apt-get install -y \
            libwebkit2gtk-4.0-dev \
            libwebkit2gtk-4.1-dev \
            libayatana-appindicator3-dev \
            librsvg2-dev \
            patchelf \
            build-essential \
            curl \
            wget \
            file \
            libssl-dev \
            libgtk-3-dev \
            pkg-config

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '20'

      - name: Install pnpm
        run: npm install -g pnpm

      - name: Setup Rust
        uses: dtolnay/rust-toolchain@stable
        with:
          targets: ${{ matrix.target }}

      - name: Install OpenSSL (macOS)
        if: runner.os == 'macOS'
        run: |
          brew install openssl pkg-config
          OPENSSL_PREFIX=$(brew --prefix openssl)
          echo "OPENSSL_DIR=$OPENSSL_PREFIX" >> $GITHUB_ENV
          echo "PKG_CONFIG_PATH=$OPENSSL_PREFIX/lib/pkgconfig" >> $GITHUB_ENV
          echo "OPENSSL_ROOT_DIR=$OPENSSL_PREFIX" >> $GITHUB_ENV
          echo "OPENSSL_LIB_DIR=$OPENSSL_PREFIX/lib" >> $GITHUB_ENV
          echo "OPENSSL_INCLUDE_DIR=$OPENSSL_PREFIX/include" >> $GITHUB_ENV
          echo "OPENSSL_STATIC=1" >> $GITHUB_ENV

      - name: Setup OpenSSL (Linux)
        if: runner.os == 'Linux'
        run: |
          # Verify OpenSSL installation
          pkg-config --exists openssl
          OPENSSL_VERSION=$(pkg-config --modversion openssl)
          OPENSSL_LIB_DIR=$(pkg-config --variable=libdir openssl)
          OPENSSL_INCLUDE_DIR=$(pkg-config --variable=includedir openssl)
          echo "OPENSSL_DIR=/usr" >> $GITHUB_ENV
          echo "OPENSSL_LIB_DIR=$OPENSSL_LIB_DIR" >> $GITHUB_ENV
          echo "OPENSSL_INCLUDE_DIR=$OPENSSL_INCLUDE_DIR" >> $GITHUB_ENV
          echo "PKG_CONFIG_PATH=/usr/lib/x86_64-linux-gnu/pkgconfig" >> $GITHUB_ENV

      - name: Rust cache
        uses: swatinem/rust-cache@v2
        with:
          workspaces: './source/src-tauri -> target'
          key: ${{ matrix.target }}

      - name: Install frontend dependencies
        working-directory: ./source
        run: pnpm install

      - name: Build the app
        uses: tauri-apps/tauri-action@v0
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
          # OpenSSL environment variables (set by previous steps)
          OPENSSL_DIR: ${{ env.OPENSSL_DIR }}
          PKG_CONFIG_PATH: ${{ env.PKG_CONFIG_PATH }}
          OPENSSL_ROOT_DIR: ${{ env.OPENSSL_ROOT_DIR }}
          OPENSSL_LIB_DIR: ${{ env.OPENSSL_LIB_DIR }}
          OPENSSL_INCLUDE_DIR: ${{ env.OPENSSL_INCLUDE_DIR }}
          OPENSSL_STATIC: ${{ env.OPENSSL_STATIC }}
        with:
          projectPath: './source'
          args: ${{ matrix.args }}

      - name: Prepare macOS security fix scripts
        if: runner.os == 'macOS'
        working-directory: ./source
        run: |
          # Create a clean release package directory
          mkdir -p release-package
          
          # Copy the built app directly (flatten structure)
          find src-tauri/target/${{ matrix.target }}/release/bundle/macos/ -name "*.app" -exec cp -r {} release-package/ \; 2>/dev/null || echo "No .app bundle found"
          
          # Copy security fix scripts and documentation
          cp scripts/macos-fix-security.sh release-package/
          cp scripts/quick-fix.sh release-package/
          cp scripts/README.md release-package/
          cp scripts/macOS-Setup-Instructions.html release-package/

      - name: Upload artifacts (macOS ARM64)
        if: matrix.platform == 'macos-latest'
        uses: actions/upload-artifact@v4
        with:
          name: macos-arm64
          path: |
            source/release-package/
            source/src-tauri/target/${{ matrix.target }}/release/bundle/dmg/*.dmg
            source/src-tauri/target/${{ matrix.target }}/release/FigShot*
          if-no-files-found: warn
          retention-days: 30

      - name: Upload artifacts (macOS Intel)
        if: matrix.platform == 'macos-13'
        uses: actions/upload-artifact@v4
        with:
          name: macos-intel
          path: |
            source/release-package/
            source/src-tauri/target/${{ matrix.target }}/release/bundle/dmg/*.dmg
            source/src-tauri/target/${{ matrix.target }}/release/FigShot*
          if-no-files-found: warn
          retention-days: 30

      - name: Upload artifacts (Windows)
        if: matrix.platform == 'windows-latest'
        uses: actions/upload-artifact@v4
        with:
          name: windows
          path: |
            source/src-tauri/target/${{ matrix.target }}/release/bundle/msi/*.msi
            source/src-tauri/target/${{ matrix.target }}/release/bundle/nsis/*.exe
            source/src-tauri/target/${{ matrix.target }}/release/FigShot.exe
          if-no-files-found: warn
          retention-days: 30

      - name: Upload artifacts (Linux)
        if: matrix.platform == 'ubuntu-22.04'
        uses: actions/upload-artifact@v4
        with:
          name: linux
          path: |
            source/src-tauri/target/${{ matrix.target }}/release/bundle/deb/*.deb
            source/src-tauri/target/${{ matrix.target }}/release/bundle/rpm/*.rpm
            source/src-tauri/target/${{ matrix.target }}/release/bundle/appimage/*.AppImage
            source/src-tauri/target/${{ matrix.target }}/release/FigShot
          if-no-files-found: warn
          retention-days: 30

  create-release:
    needs: build
    runs-on: ubuntu-latest
    if: success()
    
    steps:
      - name: Checkout
        uses: actions/checkout@v4
      
      - name: Download all artifacts
        uses: actions/download-artifact@v4
        with:
          path: ./artifacts

      - name: List artifacts
        run: find ./artifacts -type f -ls

      - name: Get version from private repo
        env:
          GITHUB_TOKEN: ${{ secrets.PRIVATE_REPO_PAT }}
        run: |
          git clone https://${{ secrets.PRIVATE_REPO_PAT }}@github.com/novincode/figma-flow-capture-gui.git temp-source
          cd temp-source
          git checkout ${{ github.event.client_payload.ref || github.event.inputs.ref || 'main' }}
          VERSION=$(node -p "require('./package.json').version")
          echo "VERSION=$VERSION" >> $GITHUB_ENV
          cd ..
          rm -rf temp-source

      - name: Create Release
        id: create_release
        uses: actions/create-release@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          tag_name: v${{ env.VERSION }}
          release_name: FigShot v${{ env.VERSION }}
          body: |
            ## FigShot v${{ env.VERSION }}
            
            Professional screen capture and recording tool optimized for Figma workflows.
            
            ### Downloads
            
            **macOS:**
            - ARM64 (Apple Silicon): Download the `macos-arm64` artifact
            - Intel: Download the `macos-intel` artifact
            
            **Windows:**
            - MSI Installer: Recommended for most users
            - EXE Installer: Alternative installer
            
            **Linux:**
            - DEB Package: For Debian/Ubuntu systems
            - RPM Package: For Red Hat/Fedora systems  
            - AppImage: Universal Linux application
            
            ### Installation Notes
            
            **macOS Users:** If you encounter security warnings, use the included security fix scripts in the download package.
            
            **Linux Users:** You may need to make the AppImage executable: `chmod +x FigShot*.AppImage`
            
            ### What's New
            - Built from commit: ${{ github.event.client_payload.sha || github.sha }}
            - Automated build from private repository
            
            ---
            
            *This release was automatically generated from our private development repository.*
          draft: false
          prerelease: false

      - name: Upload macOS ARM64 Release Assets
        uses: actions/upload-release-asset@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          upload_url: ${{ steps.create_release.outputs.upload_url }}
          asset_path: ./artifacts/macos-arm64
          asset_name: FigShot-macOS-ARM64-v${{ env.VERSION }}.zip
          asset_content_type: application/zip
        continue-on-error: true

      - name: Upload macOS Intel Release Assets  
        uses: actions/upload-release-asset@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          upload_url: ${{ steps.create_release.outputs.upload_url }}
          asset_path: ./artifacts/macos-intel
          asset_name: FigShot-macOS-Intel-v${{ env.VERSION }}.zip
          asset_content_type: application/zip
        continue-on-error: true

  build-summary:
    needs: build
    runs-on: ubuntu-latest
    if: always()
    
    steps:
      - name: Build Summary
        run: |
          echo "## FigShot Cross-Platform Build Results" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "**Source:** Private repository build relay" >> $GITHUB_STEP_SUMMARY
          echo "**Trigger:** ${{ github.event_name }}" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "| Platform | Status |" >> $GITHUB_STEP_SUMMARY
          echo "|----------|--------|" >> $GITHUB_STEP_SUMMARY
          
          if [ "${{ needs.build.result }}" == "success" ]; then
            echo "| All Platforms | ✅ Success |" >> $GITHUB_STEP_SUMMARY
          else
            echo "| Some Platforms | ❌ Failed (check individual jobs) |" >> $GITHUB_STEP_SUMMARY
          fi
          
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "### Available Downloads" >> $GITHUB_STEP_SUMMARY
          echo "Download artifacts from the Actions tab:" >> $GITHUB_STEP_SUMMARY
          echo "- **macOS ARM64**: For Apple Silicon Macs (M1/M2/M3)" >> $GITHUB_STEP_SUMMARY
          echo "- **macOS Intel**: For Intel-based Macs" >> $GITHUB_STEP_SUMMARY
          echo "- **Windows**: MSI and EXE installers" >> $GITHUB_STEP_SUMMARY
          echo "- **Linux**: DEB, RPM, and AppImage packages" >> $GITHUB_STEP_SUMMARY
