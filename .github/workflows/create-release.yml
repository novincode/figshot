name: Create Release

on:
  workflow_dispatch:
    inputs:
      version:
        description: 'Version to release (e.g., 1.1.0)'
        required: true
        type: string
      prerelease:
        description: 'Mark as pre-release'
        required: false
        type: boolean
        default: false

jobs:
  create-release:
    runs-on: ubuntu-latest
    
    steps:
      - name: Checkout
        uses: actions/checkout@v4
        
      - name: Validate version format
        run: |
          if [[ ! "${{ github.event.inputs.version }}" =~ ^[0-9]+\.[0-9]+\.[0-9]+$ ]]; then
            echo "Error: Version must be in format X.Y.Z (e.g., 1.1.0)"
            exit 1
          fi
          
      - name: Install GitHub CLI
        run: |
          type -p curl >/dev/null || (sudo apt update && sudo apt install curl -y)
          curl -fsSL https://cli.github.com/packages/githubcli-archive-keyring.gpg | sudo dd of=/usr/share/keyrings/githubcli-archive-keyring.gpg \
          && sudo chmod go+r /usr/share/keyrings/githubcli-archive-keyring.gpg \
          && echo "deb [arch=$(dpkg --print-architecture) signed-by=/usr/share/keyrings/githubcli-archive-keyring.gpg] https://cli.github.com/packages stable main" | sudo tee /etc/apt/sources.list.d/github-cli.list > /dev/null \
          && sudo apt update \
          && sudo apt install gh -y

      - name: Delete existing release and tag if they exist
        env:
          GITHUB_TOKEN: ${{ secrets.PRIVATE_REPO_PAT }}
        run: |
          echo "Checking for existing release v${{ github.event.inputs.version }}..."
          
          # Delete existing release if it exists
          if gh release view "v${{ github.event.inputs.version }}" >/dev/null 2>&1; then
            echo "Release v${{ github.event.inputs.version }} exists, deleting..."
            gh release delete "v${{ github.event.inputs.version }}" --yes
            echo "Release deleted successfully"
          else
            echo "Release v${{ github.event.inputs.version }} doesn't exist, continuing..."
          fi
          
          # Delete existing tag if it exists
          if git ls-remote --tags origin | grep -q "refs/tags/v${{ github.event.inputs.version }}"; then
            echo "Tag v${{ github.event.inputs.version }} exists remotely, deleting..."
            git push origin ":refs/tags/v${{ github.event.inputs.version }}" || echo "Failed to delete remote tag, continuing..."
          else
            echo "Tag v${{ github.event.inputs.version }} doesn't exist remotely"
          fi
          
      - name: Create Release
        uses: actions/create-release@v1
        env:
          GITHUB_TOKEN: ${{ secrets.PRIVATE_REPO_PAT }}
        with:
          tag_name: v${{ github.event.inputs.version }}
          release_name: FlowShot v${{ github.event.inputs.version }}
          body: |
            ## FlowShot v${{ github.event.inputs.version }}
            
            Professional screen capture and recording tool optimized for Figma workflows.
            
            ### Downloads
            
            **Status:** ðŸ”„ **Building now...** Binaries will be available shortly.
            
            This release will be automatically populated with cross-platform binaries from our build system:
            
            **macOS:**
            - ARM64 (Apple Silicon): For M1/M2/M3 Macs
            - Intel: For Intel-based Macs
            
            **Windows:**
            - MSI Installer: Recommended for most users
            - EXE Installer: Alternative installer
            
            **Linux:**
            - DEB Package: For Debian/Ubuntu systems
            - RPM Package: For Red Hat/Fedora systems  
            - AppImage: Universal Linux application
            
            ### Installation Notes
            
            **macOS Users:** If you encounter security warnings, use the included security fix scripts in the download package.
            
            **Linux Users:** You may need to make the AppImage executable: `chmod +x FlowShot*.AppImage`
            
            ---
            
            *Binaries will be automatically uploaded when the build completes.*
          draft: false
          prerelease: ${{ github.event.inputs.prerelease }}
          
      - name: Summary
        run: |
          echo "## Release Created ðŸŽ‰" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "**Version:** v${{ github.event.inputs.version }}" >> $GITHUB_STEP_SUMMARY
          echo "**Pre-release:** ${{ github.event.inputs.prerelease }}" >> $GITHUB_STEP_SUMMARY
          echo "**Status:** Draft (will be published when build completes)" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "The release has been created as a draft. It will be automatically" >> $GITHUB_STEP_SUMMARY
          echo "populated with binaries when the build process completes." >> $GITHUB_STEP_SUMMARY
